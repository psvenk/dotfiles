" Respect XDG Base Directory Specification
" <https://tlvince.com/vim-respect-xdg>
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
let &runtimepath = substitute(&runtimepath,
	\ $HOME.'/.vim', $XDG_CONFIG_HOME.'/vim', 'g')
let &packpath = substitute(&packpath,
	\ $HOME.'/.vim', $XDG_CONFIG_HOME.'/vim', 'g')
let g:netrw_home = $XDG_CACHE_HOME.'/vim'

" Enable syntax highlighting
syntax on
" Use my color scheme
colorscheme mycolors
" Show line numbers and highlight current line number
set number
set cursorline

" Change cursor shape in insert and replace modes
if &term =~ 'xterm\|rxvt-unicode\|alacritty\|st'
	let &t_SI = "\e[6 q"
	let &t_SR = "\e[4 q"
	let &t_EI = "\e[2 q"
endif

" Use true color (24-bit) in terminal
if &term is# 'xterm-termite'
	set termguicolors
elseif &term =~ 'alacritty\|st'
	let &t_8f = "\e[38;2;%lu;%lu;%lum"
	let &t_8b = "\e[48;2;%lu;%lu;%lum"
	set termguicolors
endif

" Enable mouse support
set mouse=a
" Automatically continue comment lines
set formatoptions^=cro
" Disallow overwriting clipboard with empty region
set cpoptions+=E
" Allow :find to search into subfolders
set path+=**
" Better tab completion in command mode
set wildmenu
" Ignore case when searching unless an uppercase letter is typed
set ignorecase
set smartcase
" Fold based on syntax where possible
set foldmethod=syntax

" Use space as Leader and LocalLeader
let mapleader = ' '
let maplocalleader = ' '

map <Leader>h
	\ :echo "hi<"
	\ . synIDattr(synID(line("."), col("."), 1), "name") . '> trans<'
	\ . synIDattr(synID(line("."), col("."), 0), "name") . "> lo<"
	\ . synIDattr(synIDtrans(synID(line("."), col("."), 1)), "name")
	\ . ">"<CR>

" Options set in /usr/share/vim/vimfiles/archlinux.vim {{{
if !filereadable(globpath(&runtimepath, 'archlinux.vim'))
	set backspace=indent,eol,start
	set ruler
	set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc
	set suffixes-=.h
	set suffixes-=.obj

	" Move temporary files to a secure location to protect against CVE-2017-1000382
	if exists('$XDG_CACHE_HOME')
		let &g:directory=$XDG_CACHE_HOME
	else
		let &g:directory=$HOME . '/.cache'
	endif
	let &g:undodir=&g:directory . '/vim/undo//'
	let &g:backupdir=&g:directory . '/vim/backup//'
	let &g:directory.='/vim/swap//'
	" Create directories if they doesn't exist
	if ! isdirectory(expand(&g:directory))
		silent! call mkdir(expand(&g:directory), 'p', 0700)
	endif
	if ! isdirectory(expand(&g:backupdir))
		silent! call mkdir(expand(&g:backupdir), 'p', 0700)
	endif
	if ! isdirectory(expand(&g:undodir))
		silent! call mkdir(expand(&g:undodir), 'p', 0700)
	endif
endif
" }}}

" Recommended in editorconfig-vim README for interop with fugitive.vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Allow filetype-specific plugins and indenting
filetype plugin indent on

" Improved detection of pairs with %
packadd! matchit

" Disable vim-polyglot Markdown plugin; the included plugin is more
" full-featured
let g:polyglot_disabled = ['markdown', 'jst', 'v']

" vim-sandwich {{{

" Use vim-surround keymappings
" https://github.com/machakann/vim-sandwich/wiki/Introduce-vim-surround-keymappings
runtime START macros/sandwich/keymap/surround.vim

" Mappings for text objects
xmap is <Plug>(textobj-sandwich-query-i)
xmap as <Plug>(textobj-sandwich-query-a)
omap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)

xmap iss <Plug>(textobj-sandwich-auto-i)
xmap ass <Plug>(textobj-sandwich-auto-a)
omap iss <Plug>(textobj-sandwich-auto-i)
omap ass <Plug>(textobj-sandwich-auto-a)

xmap im <Plug>(textobj-sandwich-literal-query-i)
xmap am <Plug>(textobj-sandwich-literal-query-a)
omap im <Plug>(textobj-sandwich-literal-query-i)
omap am <Plug>(textobj-sandwich-literal-query-a)

"}}}

" Make :UltiSnipsEdit split the window
let g:UltiSnipsEditSplit = 'context'

" Markdown fenced languages
let g:markdown_fenced_languages = ['latex=tex', 'sh', 'console=sh']

" Basic settings to make it easier to use GVim if needed {{{
if has("gui_running")
	" Disable cursor blinking
	set guicursor=a:blinkon0

	" Disable toolbars
	set guioptions=

	" Set dark background
	hi Normal guifg=grey92 guibg=grey16
	set background=dark
endif
"}}}

augroup filetypes
	au!
	au BufNewFile,BufRead *.mbox set ft=mail
augroup END

" vim: fdm=marker
