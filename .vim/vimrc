" Enable syntax highlighting
syntax on
" Use my color scheme
colorscheme mycolors
" Show line numbers and highlight current line number
set number
set cursorline

" Change cursor shape in insert, replace, and operator pending modes
if &term =~ 'xterm\|rxvt-unicode'
	let &t_SI = "\e[6 q"
	let &t_SR = "\e[4 q"
	let &t_EI = "\e[2 q"
	call timer_start(250, 'ocursor#DetectPendingMode', {'repeat': -1})
endif

" Use true color (24-bit) in terminal
if &term is# 'xterm-termite'
	set termguicolors
endif

" Enable X11 clipboard
set clipboard^=unnamedplus
" Enable mouse support
set mouse=a
" Automatically continue comment lines
set formatoptions^=cro
" Don't break a line after a one-letter word
set fo+=1
" Disallow overwriting clipboard with empty region
set cpoptions+=E
" Allow backspacing over everything
set backspace=indent,eol,start
" Allow :find to search into subfolders
set path+=**
" Better tab completion in command mode
set wildmenu
" Ignore case when searching unless an uppercase letter is typed
set ignorecase
set smartcase

" Use ~/.cache/vim/ for .netrwhist (respect XDG base directory specification)
let g:netrw_home=$XDG_CACHE_HOME.'/vim'

" Recommended in editorconfig-vim README for interop with fugitive.vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Allow filetype-specific plugins and indenting
filetype plugin indent on

" Use vim-surround keymappings for vim-sandwich {{{
" https://github.com/machakann/vim-sandwich/wiki/Introduce-vim-surround-keymappings
" https://github.com/machakann/vim-sandwich/wiki/Bracket-with-spaces
runtime START macros/sandwich/keymap/surround.vim
let g:sandwich#recipes += [
	\ {
	\	'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1,
	\	'kind': ['add', 'replace'], 'action': ['add'], 'input': ['{']
	\ },
	\ {
	\	'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1,
	\	'kind': ['add', 'replace'], 'action': ['add'], 'input': ['[']
	\ },
	\ {
	\	'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1,
	\	'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(']
	\ },
	\ {
	\	'buns': ['{\s*', '\s*}'], 'nesting': 1, 'regex': 1, 'match_syntax': 1,
	\	'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'],
	\	'input': ['{']
	\ },
	\ {
	\	'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1,
	\	'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'],
	\	'input': ['[']
	\ },
	\ {
	\	'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1,
	\	'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'],
	\	'input': ['(']
	\ },
	\ ]
"}}}

" Mappings for vim-sandwich textobjects {{{
xmap is <Plug>(textobj-sandwich-query-i)
xmap as <Plug>(textobj-sandwich-query-a)
omap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)

xmap iss <Plug>(textobj-sandwich-auto-i)
xmap ass <Plug>(textobj-sandwich-auto-a)
omap iss <Plug>(textobj-sandwich-auto-i)
omap ass <Plug>(textobj-sandwich-auto-a)

xmap im <Plug>(textobj-sandwich-literal-query-i)
xmap am <Plug>(textobj-sandwich-literal-query-a)
omap im <Plug>(textobj-sandwich-literal-query-i)
omap am <Plug>(textobj-sandwich-literal-query-a)
"}}}

" Basic settings to make it easier to use GVim if needed {{{
if has("gui_running")
	" Set dark color scheme
	hi Normal guifg=white guibg=black
	set background=dark

	" Disable cursor blinking
	set guicursor=a:blinkon0

	" Disable toolbars
	set guioptions=
endif
"}}}

" vim: fdm=marker
