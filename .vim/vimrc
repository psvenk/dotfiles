" Enable syntax highlighting
syntax on

" Set color scheme
colorscheme mycolors

" Use I-beam cursor in insert mode on urxvt
if &term is# 'rxvt-unicode-256color' || &term is# 'xterm-termite'
	let &t_SI = "\e[6 q"
	let &t_EI = "\e[2 q"
endif

" Enable X11 clipboard
set clipboard^=unnamedplus

" Enable mouse support
set mouse=a

" Automatically continue comment lines
set formatoptions^=cro

" Don't break a line after a one-letter word
set fo+=1

" Disallow overwriting clipboard with empty region
set cpoptions+=E

" Allow backspacing over autoindent, line breaks, and start of insert
set backspace=indent,eol,start

" Use ~/.cache/vim/ for .netrwhist (respect XDG base directory specification)
let g:netrw_home=$XDG_CACHE_HOME.'/vim'

" Search into subfolders with :find
set path+=**

" Display all matching files with tab completion
set wildmenu

" Use smartcase
set ignorecase
set smartcase

" Automatically open quickfix window on :make
autocmd QuickFixCmdPost [^l]* cwindow
autocmd QuickFixCmdPost    l* lwindow

" Automatically resize quickfix window based on output
" https://vim.fandom.com/wiki/Automatically_fitting_a_quickfix_window_height
function! AdjustWindowHeight(minheight, maxheight)
	exe max([min([line("$"), a:maxheight]), a:minheight]) . "wincmd _"
endfunction
"autocmd FileType qf call AdjustWindowHeight(3, 10)

" Allow filetype-specific plugins and indenting
filetype plugin indent on

" Use vim-surround keymappings for vim-sandwich
" https://github.com/machakann/vim-sandwich/wiki/Introduce-vim-surround-keymappings
" https://github.com/machakann/vim-sandwich/wiki/Bracket-with-spaces
runtime START macros/sandwich/keymap/surround.vim
let g:sandwich#recipes += [
	\ {
	\	'buns': ['{ ', ' }'], 'nesting': 1, 'match_syntax': 1,
	\	'kind': ['add', 'replace'], 'action': ['add'], 'input': ['{']
	\ },
	\ {
	\	'buns': ['[ ', ' ]'], 'nesting': 1, 'match_syntax': 1,
	\	'kind': ['add', 'replace'], 'action': ['add'], 'input': ['[']
	\ },
	\ {
	\	'buns': ['( ', ' )'], 'nesting': 1, 'match_syntax': 1,
	\	'kind': ['add', 'replace'], 'action': ['add'], 'input': ['(']
	\ },
	\ {
	\	'buns': ['{\s*', '\s*}'], 'nesting': 1, 'regex': 1, 'match_syntax': 1,
	\	'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'],
	\	'input': ['{']
	\ },
	\ {
	\	'buns': ['\[\s*', '\s*\]'], 'nesting': 1, 'regex': 1, 'match_syntax': 1,
	\	'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'],
	\	'input': ['[']
	\ },
	\ {
	\	'buns': ['(\s*', '\s*)'],   'nesting': 1, 'regex': 1, 'match_syntax': 1,
	\	'kind': ['delete', 'replace', 'textobj'], 'action': ['delete'],
	\	'input': ['(']
	\ },
	\ ]

" Mappings for vim-sandwich textobjects
xmap is <Plug>(textobj-sandwich-query-i)
xmap as <Plug>(textobj-sandwich-query-a)
omap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)

xmap iss <Plug>(textobj-sandwich-auto-i)
xmap ass <Plug>(textobj-sandwich-auto-a)
omap iss <Plug>(textobj-sandwich-auto-i)
omap ass <Plug>(textobj-sandwich-auto-a)

xmap im <Plug>(textobj-sandwich-literal-query-i)
xmap am <Plug>(textobj-sandwich-literal-query-a)
omap im <Plug>(textobj-sandwich-literal-query-i)
omap am <Plug>(textobj-sandwich-literal-query-a)

